@page "/events"
@page "/"
@using EventEase.Models
@using EventEase.Services
@using Microsoft.AspNetCore.Components.Web
@inject IEventService EventService
@inject IUserSessionService SessionService
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>EventEase - 活动列表</PageTitle>

<div class="events-page">
    <div class="page-header">
        <h1 class="page-title">
            <i class="fas fa-calendar-alt"></i>
            活动列表
        </h1>
        <p class="page-subtitle">发现精彩活动，丰富您的生活</p>
    </div>

    <div class="search-and-filter">
        <div class="search-box">
            <div class="input-group">
                <span class="input-group-text">
                    <i class="fas fa-search"></i>
                </span>
                <input type="text" @bind="searchTerm" @bind:event="oninput" @onkeypress="HandleKeyPress" 
                       class="form-control" placeholder="搜索活动名称、地点或描述..." />
                @if (!string.IsNullOrEmpty(searchTerm))
                {
                    <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                        <i class="fas fa-times"></i>
                    </button>
                }
            </div>
        </div>

        <div class="filter-section">
            <div class="filter-item">
                <label for="categoryFilter">分类筛选:</label>
                <select id="categoryFilter" class="form-select" value="@selectedCategory" @onchange="OnCategoryChanged">
                    <option value="">全部分类</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>

            <div class="filter-item">
                <label for="sortBy">排序方式:</label>
                <select id="sortBy" class="form-select" value="@sortBy" @onchange="OnSortByChanged">
                    <option value="date">按日期排序</option>
                    <option value="name">按名称排序</option>
                    <option value="price">按价格排序</option>
                    <option value="capacity">按容量排序</option>
                </select>
            </div>

            <button class="btn btn-primary" @onclick="LoadEvents">
                <i class="fas fa-sync-alt"></i>
                刷新
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">加载中...</span>
            </div>
            <p>正在加载活动...</p>
        </div>
    }
    else if (filteredEvents?.Any() == true)
    {
        <div class="events-stats">
            <p class="stats-text">
                <i class="fas fa-info-circle"></i>
                找到 <strong>@filteredEvents.Count</strong> 个活动
                @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedCategory))
                {
                    <text>（已筛选）</text>
                }
            </p>
        </div>

        <div class="events-grid">
            @foreach (var eventItem in filteredEvents)
            {
                <EventCard Event="@eventItem" 
                          IsSelected="@(selectedEvent?.Id == eventItem.Id)"
                          OnCardSelected="@HandleEventSelected" />
            }
        </div>

        @if (filteredEvents.Count > eventsPerPage)
        {
            <div class="pagination-container">
                <nav aria-label="活动分页">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                                <i class="fas fa-chevron-left"></i>
                                上一页
                            </button>
                        </li>
                        
                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                            </li>
                        }
                        
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                下一页
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        </li>
                    </ul>
                </nav>
            </div>
        }
    }
    else if (!isLoading)
    {
        <div class="no-events">
            <div class="no-events-icon">
                <i class="fas fa-calendar-times"></i>
            </div>
            <h3>暂无活动</h3>
            <p>
                @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedCategory))
                {
                    <text>没有找到符合条件的活动，请尝试调整搜索条件。</text>
                }
                else
                {
                    <text>目前没有可用的活动，请稍后再来查看。</text>
                }
            </p>
            @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedCategory))
            {
                <button class="btn btn-primary" @onclick="ClearFilters">
                    <i class="fas fa-filter"></i>
                    清除筛选条件
                </button>
            }
        </div>
    }
</div>

@code {
    private List<Event>? allEvents;
    private List<Event>? filteredEvents;
    private Event? selectedEvent;
    private string searchTerm = string.Empty;
    private string selectedCategory = string.Empty;
    private string sortBy = "date";
    private bool isLoading = true;
    private readonly List<string> categories = new() { "技术", "庆典", "营销", "团建", "产品" };
    
    // 分页相关
    private int currentPage = 1;
    private readonly int eventsPerPage = 9;
    private int totalPages => (int)Math.Ceiling((double)(filteredEvents?.Count ?? 0) / eventsPerPage);

    protected override async Task OnInitializedAsync()
    {
        await SessionService.StartSessionAsync("guest");
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            await SessionService.UpdateLastActivityAsync();
            allEvents = await EventService.GetAllEventsAsync();
            await ApplyFiltersAndSort();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"加载活动时出错: {ex.Message}");
            allEvents = new List<Event>();
            filteredEvents = new List<Event>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnCategoryChanged(ChangeEventArgs e)
    {
        selectedCategory = e.Value?.ToString() ?? string.Empty;
        await ApplyFiltersAndSort();
    }

    private async Task OnSortByChanged(ChangeEventArgs e)
    {
        sortBy = e.Value?.ToString() ?? "date";
        await ApplyFiltersAndSort();
    }

    private async Task ApplyFiltersAndSort()
    {
        if (allEvents == null) return;

        var events = allEvents.AsEnumerable();

        // 应用搜索筛选
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            events = events.Where(e => 
                e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                e.Location.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                e.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // 应用分类筛选
        if (!string.IsNullOrWhiteSpace(selectedCategory))
        {
            events = events.Where(e => e.Category.Equals(selectedCategory, StringComparison.OrdinalIgnoreCase));
        }

        // 应用排序
        events = sortBy switch
        {
            "name" => events.OrderBy(e => e.Name),
            "price" => events.OrderBy(e => e.Price),
            "capacity" => events.OrderByDescending(e => e.Capacity),
            _ => events.OrderBy(e => e.Date)
        };

        filteredEvents = events.ToList();
        currentPage = 1; // 重置到第一页

        await Task.Delay(1); // 模拟异步操作
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        { 
            await ApplyFiltersAndSort();
        }
    }

    private async Task ClearSearch()
    {
        searchTerm = string.Empty;
        await ApplyFiltersAndSort();
    }

    private async Task ClearFilters()
    {
        searchTerm = string.Empty;
        selectedCategory = string.Empty;
        sortBy = "date";
        await ApplyFiltersAndSort();
    }

    private async Task HandleEventSelected(Event eventItem)
    { 
        selectedEvent = eventItem;
        await SessionService.UpdateLastActivityAsync();
        await Task.Delay(1);
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await SessionService.UpdateLastActivityAsync();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        // 清理资源
    }
}
